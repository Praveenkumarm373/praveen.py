!/usr/bin/python3.7

#a = 3
#b = 4
#c = "praveen"
#if(a>b):
#       print (a)
#else:
#       print (b)
#       print (c)


#v = -12
#if v:
#       print ("1 - correct expersion")
#       print (v)
#else:
#       print ("1 - wrong expersion")
#       print (v)
#
#print ("close the program")


#num=int(input("enter number"))
#if num%2==0:
#       if num%3==0:
#               print ("divisible by 3 and 2")
#       else:
#               print ("divisible by 2 not 3")
#else:
#       if num%3==0:
#               print ("divisible by 3 not 2")
#       else:
#               print ("not divisible by 3 and 2")



#def main():
        #use a for loop over a collection
#       months = ["jan","feb","mar"]
#       for m in months:
#               print(m)
#if __name__=="__main__":
#       main()



i=2
while(i < 100):
        j=2
        while(j <= (i/j)):
                if not(i%j): break
                j = j+1
        if (j > i/j):
                print(i," is prime")
        i = i+1


import time;
t=time.time()
print(t)


from datetime import date
from datetime import time
from datetime import datetime
def main():
        today=datetime.now()
        #print (today)
        #t=datetime.time(datetime.now())
        #print(t)
        wd=date.weekday(today)
        days=["monday","tuesday","wed","thur","fri","sat","sun"]
        print("today is %d" %wd )
        print("which is a " + days[wd])

main()


#def main(srt):
#       print(srt)
#       return
#
#main("praveen kumar")


def main(a):
        a.append([1,2,3,4]);
        print(a)
        return

a=[6,7,8,9]
main(a)




file = open("/root/pp.txt","r")
for line in file:
        print(line)
       



def main():
        f=open("pk.txt","w+")
        for i in range(2):
                f.write(input())
        f.close()
main()


def main(*names):
        for n in names:
                print ("hello ",n)

main("main","pro","praveen","kumar")

def sum(a,b):
        total = a+b
        return total

total=sum (10,20)
print(total)





total=0
def sum(a,b):
        total = a+b
        print(total)

sum (10,20)
print(total)


class person:
        def __init__(self, name, age):
                self.name = name
                self.age = age
p1 = person("john", 55)
print(p1.name)
print(p1.age)



class person:
        def __init__(self, name, age):
                self.name=name
                self.age=age
        def myfunc(self):
                print(self.name)
p1= person("john", 36)
p1.myfunc()


class emp:
        empCount = 0
        def __init__(self, name, dept, salary):
                self.name = name
                self.dept = dept
                self.salary = salary
                emp.empCount += 1
        def displaycount(self):
                print ("total employee %d" % emp.empCount)
        def displayemp(self):
                print ("name :",self.name, ",dept:",self.dept,", salary :",self.salary)
emp1=emp("praveen", "mech", 1500000)
emp2=emp("mani", "it", 1000)
emp1.displayemp()
emp2.displayemp()




class garbage:
        def __init__(self, x=1,y=0):
                self.x =x
                self.y =y
        def __del__(self):
                class_name = self.__class__.__name__
                print(class_name, "destroyed")
pt1=garbage()
pt2=pt1
pt3=pt2
print(id(pt1),id(pt2),id(pt3))
del pt1
del pt2
del pt3


class parent:
        a = 10
        b = 100

class child(parent):
        x=6
g = child()
print(g.a)


class emp:
        num_emp=0
        raise_amount=1.04
        def __init__(self, first, last, sal):
                self.first=first
                self.last=last
                self.sal=sal
                self.email=first + '.' + last + '@company.com'
                emp.num_emp += 1
        def fullname (self):
                return '{} {}'.format(self.first, self.last)
        def apply_raise (self):
                self.sal=int(self.sal * raise_amount)
class dev(emp):
        pass

emp_1=dev('praveen','devops','102666')
print(emp_1.email)



class parent:                            #overriding
        def method(self):
                print("praveen")
class child(parent):
        def method(self):
                print("kumar")
i=child()
i.method()




class justcounter:                #data hiding
        __secretCount = 0
        def count(self):
                self.__secretCount += 1
                print(self.__secretCount)

counter = justcounter()
counter.count()
counter.count()
print(counter._justcounter__secretCount)



class myclass:
        __hiddenVar = 0
        def add(self, increment):
                self.__hiddenVar += increment
                print(self.__hiddenVar)
myobject = myclass()
myobject.add(3)
myobject.add(8)
print(myobject._myclass__hiddenVar)



import re
pattern = 'this'
text = 'does this text match the pattern?'
match = re.search(pattern, text)
s = match.start()
e = match.end()
print('Found "%s" in "%s" from %d to %d ("%s")' % (match.re.pattern, match.string, s, e, text[s:e]))



import re
line = "cats are smarter than dogs"

matchObj = re.match(r'(.*) are (.*?) .*', line, re.M|re.I)
if matchObj:
        print("matchObj.group() : ", matchObj.group())
        print("matchObj.group(1) : ",matchObj.group(1))
        print("matchObj.group(2) : ",matchObj.group(2))
else:
        print("no match")




##html##
print("Content-type:text/html\r\n\r\n")
print('<html>')
print('<head>')
print('<title>Hello World</title>')
print('</head>')
print('<body>')
print('<h2>praveen kumar </h2>')
print('</body>')
print('</html>')



import os
print("Content-type:text/html\r\n\r\n")
print("<font size=+1>Environment</font><\br>"
for param in os.environ.keys():
        print ("<b>%20s</b>: %s<\br>" % (param, os.environ[param]




import MySQLdb

db = MySQLdb.connect("localhost","root","zippyops","testdb" )
cursor =db.cursor()
cursor.execute("SELECT VERSION()")
data = cursor.fetchone()
print("Database version : %s " % data)
db.close()



print("Set-Cokkie:UserID = XYZ;\r\n")
print("Set-Cokkie:Password = XYZ123;\r\n")
print("Set-Cookie:Expires = Tuesday, 31-Dec-2007 23:12:40 GMT;\r\n")
print("Set-Cookie:Domain = www.zippyops.com;\r\n")
print("Set-Cookie:Path = /per1;\n")
print("Contemt-type:text/html\r\n\r\n")



import MySQLdb

db = MySQLdb.connect("localhost","root","zippyops","testdb" )
cursor =db.cursor()

cursor.execute("drop table if exists employee")
sql = """create table employee (
         first_name char(50) not null,
         last_name char(50),
         age int,
         sex char(1),
         income float )"""
cursor.execute(sql)
db.close()





import MySQLdb

db = MySQLdb.connect("localhost","root","zippyops","testdb" )
cursor =db.cursor()
sql = """insert into employee values('praveen','kumar','22','m','225.00')"""
cursor.execute(sql)
db.commit()
db.close()




#!/usr/bin/python           # This is server.py file

import socket               # Import socket module

s = socket.socket()         # Create a socket object
host = socket.gethostname() # Get local machine name
port = 12345                # Reserve a port for your service.
s.bind((host, port))        # Bind to the port

s.listen(5)                 # Now wait for client connection.
while True:
   c, addr = s.accept()     # Establish connection with client.
   print 'Got connection from', addr
   c.send('Thank you for connecting')
   c.close()                # Close the connection
   
   
   
   
   #!/usr/bin/python           # This is client.py file

import socket               # Import socket module

s = socket.socket()         # Create a socket object
host = socket.gethostname() # Get local machine name
port = 12345                # Reserve a port for your service.

s.connect((host, port))
print s.recv(1024)
s.close()                     # Close the socket when done






import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)
server.ehlo()
server.starttls()
server.login("praveenkumarm373@gmail.com", "chokkankadu")
text = "Good Morning...."
server.sendmail("praveenkumarm373@gmail.com","praveenkumarm1105@gmail.com", text)
server.quit()

print("send")





import smtplib

message = """From: From Person <praveenkumarm373@gmail.com>
To: To Person <praveenkumarm373@gmail.com>
MIME-Version: 1.0
Content-type: text/html
Subject: SMTP HTML e-mail test

This is an e-mail message to be sent in HTML format

<b>This is HTML message.</b>
<h1>This is headline.</h1>
"""

try:
   smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
   smtpObj.ehlo()
   smtpObj.starttls()
   smtpObj.login("praveenkumarm373@gmail.com", "chokkankadu")
   smtpObj.sendmail("praveenkumarm373@gmail.com", "praveenkumarm1105@gmail.com", message)
   smtpObj.quit()
   print("Successfully sent email")
except SMTPException:
   print("Error: unable to send email")




import smtplib

message = """From: From Person <praveenkumarm373@gmail.com>
To: To Person <praveenkumarm373@gmail.com>
MIME-Version: 1.0
Content-type: text/html
Subject: SMTP HTML e-mail test

This is an e-mail message to be sent in HTML format

<b>This is HTML message.</b>
<h1>This is headline.</h1>
"""

try:
   smtpObj = smtplib.SMTP('smtp.gmail.com', 587)

   smtpObj.ehlo()
   smtpObj.starttls()
   smtpObj.login("praveenkumarm373@gmail.com", "chokkankadu")
   smtpObj.sendmail("praveenkumarm373@gmail.com", "praveenkumarm1105@gmail.com", message)
   smtpObj.quit()
   print("Successfully sent email")
except SMTPException:
   print("Error: unable to send email")
   
   
   
   
   
import smtplib
import base64

filename = "/root/p2.py"

# Read a file and encode it into base64 format
fo = open(filename, "rb")
filecontent = fo.read()
encodedcontent = base64.b64encode(filecontent)  # base64

sender = 'praveenkumarm373@gmail.com'
reciever = 'praveenkumarm1105@gmail.com'

marker = "AUNIQUEMARKER"

body ="""
This is a test email to send an attachement.
"""
# Define the main headers.
part1 = """From: From Person <praveenkumarm373@gmail.com>
To: To Person <praveenkumarm1105@gmail.com>
Subject: Sending Attachement
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=%s
--%s
""" % (marker, marker)

# Define the message action
part2 = """Content-Type: text/plain
Content-Transfer-Encoding:8bit

%s
--%s
""" % (body,marker)
# Define the attachment section
part3 = """Content-Type: multipart/mixed; name=\"%s\"
Content-Transfer-Encoding:base64
Content-Disposition: attachment; filename=%s

%s
--%s--
""" %(filename, filename, encodedcontent, marker)
message = part1 + part2 + part3

try:
   smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
   smtpObj.ehlo()
   smtpObj.starttls()
   smtpObj.login("praveenkumarm373@gmail.com", "chokkankadu")
   smtpObj.sendmail("praveenkumarm373@gmail.com", "praveenkumarm1105@gmail.com", message)
   print "Successfully sent email"
except Exception:
   print "Error: unable to send email"





import thread
import time

# Define a function for the thread
def print_time( threadName, delay):
   count = 0
   while count < 5:
      time.sleep(delay)
      count += 1
      print "%s: %s" % ( threadName, time.ctime(time.time()) )

# Create two threads as follows
try:
   thread.start_new_thread( print_time, ("Thread-1", 2, ) )
   thread.start_new_thread( print_time, ("Thread-2", 4, ) )
except:
   print "Error: unable to start thread"

while 1:
   pass
   
   
   

import threading
import time

exitFlag = 0

class myThread (threading.Thread):
   def __init__(self, threadID, name, counter):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.counter = counter
   def run(self):
      print "Starting " + self.name
      print_time(self.name, 5, self.counter)
      print "Exiting " + self.name

def print_time(threadName, counter, delay):
   while counter:
      if exitFlag:
         threadName.exit()
      time.sleep(delay)
      print "%s: %s" % (threadName, time.ctime(time.time()))
      counter -= 1

# Create new threads
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# Start new Threads
thread1.start()
thread2.start()

print "Exiting Main Thread"





from thread import start_new_thread

threadId = 1

def factorial(n):
        global threadId
        if n< 1:
                print "%s: %d" % ("Thread", threadId )
                threadId += 1
                return 1
        else:
                returnNumber = n * factorial( n - 1 )
                print(str(n) + '! = ' + str(returnNumber))
                return returnNumber
start_new_thread(factorial,(5, ))
start_new_thread(factorial,(4, ))

c = raw_input("waiting for thread to return..\n")






import threading
import time

def worker():
        print threading.currentThread().getName(), 'Starting'
        time.sleep(2)
        print threading.currentThread().getName(), 'Exiting'
def my_service():
        print threading.currentThread().getName(), 'Starting'
        time.sleep(2)
        print threading.currentThread().getName(), 'Exiting'
t = threading.Thread(name='my_service', target=my_service)
w = threading.Thread(name='worker', target=worker)
w2 = threading.Thread(target=worker)

w.start()
w2.start()
t.start()





import xml.etree.ElementTree as xml

def createXML(filename):
        root = xml.Element("users")
        children1 = xml.Element("user")
        root.append(children1)

        tree = xml.ElementTree(root)
        with open(filename, "wb") as fh:
                tree.write(fh)
createXML("test.xml")





import xml.etree.ElementTree as xml

def createXML(filename):
        root = xml.Element("users")
        children1 = xml.Element("user")
        root.append(children1)

        userId1 = xml.SubElement(children1, "id")
        userId1.text = "555"

        userId1 = xml.SubElement(children1, "name")
        userId1.text = "zippyops"
        tree = xml.ElementTree(root)
        with open(filename, "wb") as fh:
                tree.write(fh)
createXML("test1.xml")


#start 

<?xml version="1.0"?>
<company>
        <name>Zippyops Consulting Service</name>
        <staff id="1001">
                <nickname>Charlie</nickname>
                <salary>100,000</salary>
        </staff>
        <staff id="1002">
                <nickname>praveen</nickname>
                <salary>200,000</salary>
        </staff>
        <staff id="1003">
                <nickname>nik</nickname>
                <salary>300,000</salary>
        </staff>
</company>





from xml.dom import minidom
doc = minidom.parse("xml.xml")

name = doc.getElementsByTagName("name")[0]
print(name.firstChild.data)
staffs = doc.getElementsByTagName("staff")
for staff in staffs:
        sid = staff.getAttribute("id")
        nickname = staff.getElementsByTagName("nickname")[0]
        salary = staff.getElementsByTagName("salary")[0]
        print("id:%s, nickname:%s, salary:%s" % (sid, nickname.firstChild.data, salary.firstChild.data))

#end



















